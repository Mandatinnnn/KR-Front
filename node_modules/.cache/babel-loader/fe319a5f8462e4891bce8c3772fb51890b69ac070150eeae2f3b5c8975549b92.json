{"ast":null,"code":"var _jsxFileName = \"D:\\\\Front\\\\kr\\\\src\\\\Components\\\\MAIN\\\\Background\\\\Background.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../Background/Background.css';\nimport data from 'D:/Front/kr/src/paintings.json';\nimport ImageAndPhrase from 'D:/Front/kr/src/Components/ADD/ImageAndPhrase/ImageAndPhrase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Background = () => {\n  _s();\n  const phrase = 'I am an artist, this is how I see it';\n  const [portraitImages] = useState(() => {\n    const temp = [];\n    data.forEach(image => {\n      const orientation = image.width > image.height ? 'landscape' : 'portrait';\n      if (orientation === 'portrait') {\n        temp.push(image);\n      }\n    });\n    return temp;\n  });\n  const [landscapeImages] = useState(() => {\n    const temp = [];\n    data.forEach(image => {\n      const orientation = image.width > image.height ? 'landscape' : 'portrait';\n      if (orientation === 'landscape') {\n        temp.push(image);\n      }\n    });\n    return temp;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"background\",\n    children: [/*#__PURE__*/_jsxDEV(ImageAndPhrase, {\n      image: landscapeImages[Math.floor(Math.random() * landscapeImages.length)],\n      phrase: phrase,\n      type: \"landscape\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ImageAndPhrase, {\n      image: portraitImages[Math.floor(Math.random() * portraitImages.length)],\n      phrase: phrase,\n      type: \"portrait\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ImageAndPhrase, {\n      image: landscapeImages[Math.floor(Math.random() * landscapeImages.length)],\n      phrase: phrase,\n      type: \"landscape\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n_s(Background, \"SXz3O9wwWed/9Mr4kSUF47VxyBA=\");\n_c = Background;\nexport default Background;\nvar _c;\n$RefreshReg$(_c, \"Background\");","map":{"version":3,"names":["React","useState","data","ImageAndPhrase","jsxDEV","_jsxDEV","Background","_s","phrase","portraitImages","temp","forEach","image","orientation","width","height","push","landscapeImages","className","children","Math","floor","random","length","type","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Front/kr/src/Components/MAIN/Background/Background.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport '../Background/Background.css';\r\nimport data from 'D:/Front/kr/src/paintings.json'; \r\nimport ImageAndPhrase from 'D:/Front/kr/src/Components/ADD/ImageAndPhrase/ImageAndPhrase';\r\n\r\nconst Background = () => {\r\n    const phrase = 'I am an artist, this is how I see it';\r\n\r\n    const [portraitImages] = useState(() => {\r\n        const temp = [];\r\n        data.forEach(image => {\r\n            const orientation = image.width > image.height ? 'landscape' : 'portrait';\r\n            if (orientation === 'portrait') {\r\n                temp.push(image);\r\n            }\r\n        });\r\n        return temp;\r\n    });\r\n\r\n    const [landscapeImages] = useState(() => {\r\n        const temp = [];\r\n        data.forEach(image => {\r\n            const orientation = image.width > image.height ? 'landscape' : 'portrait';\r\n            if (orientation === 'landscape') {\r\n                temp.push(image);\r\n            }\r\n        });\r\n        return temp;\r\n    });\r\n\r\n    return (\r\n        <div className='background'>\r\n            <ImageAndPhrase image={landscapeImages[Math.floor(Math.random() * landscapeImages.length)]}  phrase={phrase} type='landscape' />\r\n            <ImageAndPhrase image={portraitImages[Math.floor(Math.random() * portraitImages.length)]} phrase={phrase} type='portrait' />\r\n            <ImageAndPhrase image={landscapeImages[Math.floor(Math.random() * landscapeImages.length)]}  phrase={phrase} type='landscape' />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Background;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,8BAA8B;AACrC,OAAOC,IAAI,MAAM,gCAAgC;AACjD,OAAOC,cAAc,MAAM,8DAA8D;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1F,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAMC,MAAM,GAAG,sCAAsC;EAErD,MAAM,CAACC,cAAc,CAAC,GAAGR,QAAQ,CAAC,MAAM;IACpC,MAAMS,IAAI,GAAG,EAAE;IACfR,IAAI,CAACS,OAAO,CAACC,KAAK,IAAI;MAClB,MAAMC,WAAW,GAAGD,KAAK,CAACE,KAAK,GAAGF,KAAK,CAACG,MAAM,GAAG,WAAW,GAAG,UAAU;MACzE,IAAIF,WAAW,KAAK,UAAU,EAAE;QAC5BH,IAAI,CAACM,IAAI,CAACJ,KAAK,CAAC;MACpB;IACJ,CAAC,CAAC;IACF,OAAOF,IAAI;EACf,CAAC,CAAC;EAEF,MAAM,CAACO,eAAe,CAAC,GAAGhB,QAAQ,CAAC,MAAM;IACrC,MAAMS,IAAI,GAAG,EAAE;IACfR,IAAI,CAACS,OAAO,CAACC,KAAK,IAAI;MAClB,MAAMC,WAAW,GAAGD,KAAK,CAACE,KAAK,GAAGF,KAAK,CAACG,MAAM,GAAG,WAAW,GAAG,UAAU;MACzE,IAAIF,WAAW,KAAK,WAAW,EAAE;QAC7BH,IAAI,CAACM,IAAI,CAACJ,KAAK,CAAC;MACpB;IACJ,CAAC,CAAC;IACF,OAAOF,IAAI;EACf,CAAC,CAAC;EAEF,oBACIL,OAAA;IAAKa,SAAS,EAAC,YAAY;IAAAC,QAAA,gBACvBd,OAAA,CAACF,cAAc;MAACS,KAAK,EAAEK,eAAe,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGL,eAAe,CAACM,MAAM,CAAC,CAAE;MAAEf,MAAM,EAAEA,MAAO;MAACgB,IAAI,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChIvB,OAAA,CAACF,cAAc;MAACS,KAAK,EAAEH,cAAc,CAACW,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGb,cAAc,CAACc,MAAM,CAAC,CAAE;MAACf,MAAM,EAAEA,MAAO;MAACgB,IAAI,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC5HvB,OAAA,CAACF,cAAc;MAACS,KAAK,EAAEK,eAAe,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGL,eAAe,CAACM,MAAM,CAAC,CAAE;MAAEf,MAAM,EAAEA,MAAO;MAACgB,IAAI,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/H,CAAC;AAEd,CAAC;AAACrB,EAAA,CAhCID,UAAU;AAAAuB,EAAA,GAAVvB,UAAU;AAkChB,eAAeA,UAAU;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}